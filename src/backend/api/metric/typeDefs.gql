type ExamMetric {
  courseId: ID!
  courseName: String!
  total: Int!
  totalPassed: Int!
  totalFailed: Int!
}

type ExamMetrics {
  data: [ExamMetric]
  count: Int!
}

# TO DO - Reuse Exam types
type ReportExamExerciseAnswer {
  _id: ID!
  name: String!,
  description: String
  descriptionUrl: String
  correct: Boolean
  selected: Boolean
}

type ReportExamExercise {
  _id: ID!
  name: String!
  description: String
  descriptionUrl: String
  points: Float!
  answers: [ReportExamExerciseAnswer]!
}

type ReportExam {
  id: ID!
  name: String!
  examTemplateId: ID!
  exercises: [ReportExamExercise]
  created: String!
  updated: String
  completed: Boolean
  idNumber: String!
  courseId: ID!
  courseName: String!
  score: Float
}

type ReportExams {
  data: [ReportExam]
  count: Int!
}

extend type Query {
  getExamMetrics(dateFrom: String!, dateTo: String!): ExamMetrics
  getExamsReportData(dateFrom: String!, dateTo: String!): ReportExams
}
